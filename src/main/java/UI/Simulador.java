package UI;

import java.awt.Color; 
import java.awt.Font; 
import java.awt.event.ActionEvent; 
import java.awt.event.ActionListener; 
import java.awt.event.MouseEvent; 
import java.awt.event.MouseListener; 
import java.util.Vector; 
import java.awt.FlowLayout;
import javax.swing.JScrollPane; 
import UI.PanelConfiguracionProcesos; 
import UI.PanelProceso; 
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder; 
import javax.swing.JDialog; 
import javax.swing.JLabel; 
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.JComboBox; 
import javax.swing.JButton;

import Clases.Cola;
import Clases.PCB;
import UI.UI_planificador;
import Planificadores.P_FCFS;
import Planificadores.P_PA;
import Planificadores.P_PNA;
import Planificadores.P_RoundRobin;
import Planificadores.P_SJF;
import Planificadores.P_SRTF;
import javax.swing.ButtonGroup;
/**
 *
 * @author Diego A. Vivolo
 */
public class Simulador extends javax.swing.JFrame {
    
    private UI_planificador planificadorActual;
    private Vector<Double> vectorBurst;
    private Vector<Double> vectorLlegada;
    private Vector<Double> vectorBloqueado;
    private JPanel panelContenedorProcesos;
    private JScrollPane scrollPaneProcesos;
    
    
    public Simulador() {
        initComponents();
        
        
        
        ButtonGroup grupoAlgoritmos = new ButtonGroup();
        grupoAlgoritmos.add(FCFS);
        grupoAlgoritmos.add(PA);
        grupoAlgoritmos.add(PNA);
        grupoAlgoritmos.add(ROUNDROBIN);
        grupoAlgoritmos.add(SJF);
        grupoAlgoritmos.add(SRTF);

        FCFS.setSelected(true); 
        PA.setSelected(false);
        PNA.setSelected(false);
        ROUNDROBIN.setSelected(false);
        SJF.setSelected(false);
        SRTF.setSelected(false);

        planificadorActual = new P_FCFS();
        panelContenedorProcesos = new JPanel();
        panelContenedorProcesos.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 5)); 
        panelContenedorProcesos.setBackground(Color.WHITE);
        panelContenedorProcesos.setOpaque(true);

        scrollPaneProcesos = new JScrollPane(panelContenedorProcesos);
        scrollPaneProcesos.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        scrollPaneProcesos.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);
        scrollPaneProcesos.setBorder(javax.swing.BorderFactory.createTitledBorder("Procesos")); 

        getContentPane().add(scrollPaneProcesos, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 560, 190));
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jInternalFrame1 = new javax.swing.JInternalFrame();
        jMenuBar1 = new javax.swing.JMenuBar();
        N_procesos = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        C_procesos = new javax.swing.JMenuItem();
        Cargar_procesos = new javax.swing.JMenuItem();
        G_estadisticas = new javax.swing.JMenuItem();
        Salir = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        Opciones = new javax.swing.JMenu();
        A_Planificacion = new javax.swing.JMenu();
        FCFS = new javax.swing.JRadioButtonMenuItem();
        PA = new javax.swing.JRadioButtonMenuItem();
        PNA = new javax.swing.JRadioButtonMenuItem();
        ROUNDROBIN = new javax.swing.JRadioButtonMenuItem();
        SJF = new javax.swing.JRadioButtonMenuItem();
        SRTF = new javax.swing.JRadioButtonMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jRadioButtonMenuItem1 = new javax.swing.JRadioButtonMenuItem();

        jInternalFrame1.setVisible(true);

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Simulador");
        setPreferredSize(new java.awt.Dimension(600, 400));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        N_procesos.setText("Archivo");

        jMenuItem1.setText("Nuevo proceso");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        N_procesos.add(jMenuItem1);

        C_procesos.setText("Configuracion de los procesos");
        C_procesos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                C_procesosMouseClicked(evt);
            }
        });
        C_procesos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                C_procesosActionPerformed(evt);
            }
        });
        N_procesos.add(C_procesos);

        Cargar_procesos.setText("Cargar archivos para los procesos");
        N_procesos.add(Cargar_procesos);

        G_estadisticas.setText("Guardar estadisticas");
        G_estadisticas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                G_estadisticasActionPerformed(evt);
            }
        });
        N_procesos.add(G_estadisticas);

        Salir.setText("Reiniciar");
        N_procesos.add(Salir);

        jMenuItem6.setText("Salir");
        N_procesos.add(jMenuItem6);

        jMenuBar1.add(N_procesos);

        Opciones.setText("Opciones");
        Opciones.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                OpcionesMouseDragged(evt);
            }
        });

        A_Planificacion.setText("Algoritmos de planificacion");

        FCFS.setSelected(true);
        FCFS.setText("FCFS");
        FCFS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FCFSActionPerformed(evt);
            }
        });
        A_Planificacion.add(FCFS);

        PA.setSelected(true);
        PA.setText("PA");
        PA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PAActionPerformed(evt);
            }
        });
        A_Planificacion.add(PA);

        PNA.setSelected(true);
        PNA.setText("PNA");
        PNA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PNAActionPerformed(evt);
            }
        });
        A_Planificacion.add(PNA);

        ROUNDROBIN.setSelected(true);
        ROUNDROBIN.setText("ROUNDROBIN");
        ROUNDROBIN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ROUNDROBINActionPerformed(evt);
            }
        });
        A_Planificacion.add(ROUNDROBIN);

        SJF.setSelected(true);
        SJF.setText("SJF");
        SJF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SJFActionPerformed(evt);
            }
        });
        A_Planificacion.add(SJF);

        SRTF.setSelected(true);
        SRTF.setText("SRFT");
        SRTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SRTFActionPerformed(evt);
            }
        });
        A_Planificacion.add(SRTF);

        Opciones.add(A_Planificacion);

        jMenu4.setText("Velocidad");
        jMenu4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu4ActionPerformed(evt);
            }
        });

        jRadioButtonMenuItem1.setSelected(true);
        jRadioButtonMenuItem1.setText("1 fps");
        jMenu4.add(jRadioButtonMenuItem1);

        Opciones.add(jMenu4);

        jMenuBar1.add(Opciones);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void OpcionesMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpcionesMouseDragged
        // TODO add your handling code here:
    }//GEN-LAST:event_OpcionesMouseDragged

    private void jMenu4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu4ActionPerformed

    private void G_estadisticasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_G_estadisticasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_G_estadisticasActionPerformed

    private void SJFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SJFActionPerformed
        planificadorActual = new P_SJF();
        System.out.println("Planificador cambiado a SJF"); // Para depurar
    }//GEN-LAST:event_SJFActionPerformed

    private void SRTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SRTFActionPerformed
        planificadorActual = new P_SJF();
        System.out.println("Planificador cambiado a SJF"); // Para depurar
    }//GEN-LAST:event_SRTFActionPerformed

    private void FCFSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FCFSActionPerformed
        planificadorActual = new P_SJF();
        System.out.println("Planificador cambiado a SJF"); // Para depurar
    }//GEN-LAST:event_FCFSActionPerformed

    private void PAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PAActionPerformed
        planificadorActual = new P_PA();
        System.out.println("Planificador cambiado a PNA");
    }//GEN-LAST:event_PAActionPerformed

    private void PNAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PNAActionPerformed
        planificadorActual = new P_PNA();
        System.out.println("Planificador cambiado a PNA");
    }//GEN-LAST:event_PNAActionPerformed

    private void ROUNDROBINActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ROUNDROBINActionPerformed
        planificadorActual = new P_SJF();
        System.out.println("Planificador cambiado a SJF"); // Para depurar
    }//GEN-LAST:event_ROUNDROBINActionPerformed

    private void C_procesosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_C_procesosActionPerformed

        PanelConfiguracionProcesos panelConfig = new PanelConfiguracionProcesos(this); // 
        
        cargarProcesosUI();
        
        if (this.vectorBurst != null) { // 
            System.out.println("Configuración de procesos recibida."); // 
            System.out.println("Procesos a crear: " + this.vectorBurst.size()); // 
        }
    }//GEN-LAST:event_C_procesosActionPerformed

    private void C_procesosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_C_procesosMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_C_procesosMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Simulador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Simulador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Simulador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Simulador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Simulador().setVisible(true);
            }
        });
    }
    private void cargarProcesosUI() {

            panelContenedorProcesos.removeAll();


            if (this.vectorBurst == null || this.vectorLlegada == null || this.vectorBloqueado == null) {
                System.out.println("No hay datos de procesos para cargar.");
                // Refrescar por si borramos algo
                panelContenedorProcesos.revalidate();
                panelContenedorProcesos.repaint();
                return;
            }

            System.out.println("Cargando " + this.vectorBurst.size() + " procesos en la UI...");

            for (int i = 0; i < this.vectorBurst.size(); i++) {
                try {

                    int tiempoBurst = this.vectorBurst.get(i).intValue();
                    int tiempoLlegada = this.vectorLlegada.get(i).intValue();
                    int tiempoBloqueado = this.vectorBloqueado.get(i).intValue();

                    int pid = i + 1; 
                    String nombreProceso = "Proceso " + pid;
                    int prioridad = 1;

                    int totalInstrucciones = tiempoBurst * 10; 

                    PCB pcb = new PCB(nombreProceso, totalInstrucciones, tiempoBurst, tiempoBloqueado, prioridad);

                    PanelProceso panelVisual = new PanelProceso(pcb); 
                    panelContenedorProcesos.add(panelVisual);

                } catch (Exception e) {
                    System.err.println("Error al crear PCB o PanelProceso.");
                    e.printStackTrace();
                }
            }
            panelContenedorProcesos.revalidate();
            panelContenedorProcesos.repaint();
        }    
    public void setVectorBurst(Vector<Double> vectorBurst) {
        this.vectorBurst = vectorBurst;
    }

    public void setVectorLlegada(Vector<Double> vectorLlegada) {
        this.vectorLlegada = vectorLlegada;
    }

    public void setVectorBloqueado(Vector<Double> vectorBloqueado) {
        this.vectorBloqueado = vectorBloqueado;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu A_Planificacion;
    private javax.swing.JMenuItem C_procesos;
    private javax.swing.JMenuItem Cargar_procesos;
    private javax.swing.JRadioButtonMenuItem FCFS;
    private javax.swing.JMenuItem G_estadisticas;
    private javax.swing.JMenu N_procesos;
    private javax.swing.JMenu Opciones;
    private javax.swing.JRadioButtonMenuItem PA;
    private javax.swing.JRadioButtonMenuItem PNA;
    private javax.swing.JRadioButtonMenuItem ROUNDROBIN;
    private javax.swing.JRadioButtonMenuItem SJF;
    private javax.swing.JRadioButtonMenuItem SRTF;
    private javax.swing.JMenuItem Salir;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem1;
    // End of variables declaration//GEN-END:variables


}
